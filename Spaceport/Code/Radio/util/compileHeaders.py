import re
import os
# import sys

reg_settings = os.listdir("reg_values")

reg_list = ["RF_MODEM_TX_RAMP_DELAY_12", "RF_MODEM_BCR_NCO_OFFSET_2_12", "RF_MODEM_AFC_LIMITER_1_3", 
            "RF_MODEM_AGC_CONTROL_1", "RF_MODEM_AGC_WINDOW_SIZE_12", "RF_MODEM_RAW_CONTROL_10", "RF_MODEM_SPIKE_DET_2", 
            "RF_MODEM_DSA_CTRL1_5", "RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12", "RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12", 
            "RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12", "RF_SYNTH_PFDCP_CPFF_7"]

individual_regs = [("RF_PA_MODE_4", 3)]

all_regs = []

HEADER = "// AUTOGENERATED FILE\n// compileHeaders.py v1\n\n"

for file in reg_settings:
    # open output
    o = open(os.path.join("output", file), "w")
    o.write(HEADER)
    fileBase = file.split(".")[0]
    o.write("#ifndef H_" + fileBase + "\n#define H_" + fileBase + "\n\n" + \
            "// Original file: " + file + "\n" + \
            "// Register values generated using Silicon Labs WDS (Copyright 2017 Silicon Laboratories, Inc.)\n\n")
    # open file
    f = open(os.path.join("reg_values", file), "r")
    text = ""

    # read entire file
    line = f.readline()
    while (line):
        text += line
        line = f.readline()

    headerm = re.search(r"// INPUT DATA\n/\*[^\*]+\*/", text)

    if (headerm):
        o.write(headerm.group() + "\n\n")
    else:
        o.write("// Failed to locate WDS input header!\n\n")

    o.write("// Property values\n")
    # find desired property
    for regName in reg_list:
        m = re.search(r"/\*[^#]+#define " + regName + r"( 0x[0-9ABCDEFabcdef]+,?)+", text)
        if (m):
            prop = m.group()
            mVal = re.search(r"#define " + regName + r" .+", prop)
            o.write(mVal.group() + "\n")
            all_regs.append((regName, len(mVal.group().split(","))))
        else:
            print("Error: could not find property match: " + regName + " in " + file)

    for regName in individual_regs:
        m = re.search(r"/\*[^#]+#define " + regName[0] + r"( 0x[0-9ABCDEFabcdef]+,?)+", text)
        if (m):
            prop = m.group()
            mVal = re.search(r"(?<=#define " + regName[0] + r" ).+", prop)
            vals = mVal.group().split(", ")
            outCmd = vals[0:2] + ["0x01"] + [hex(int(vals[3], 16) + regName[1], )] + [vals[4+regName[1]]]
            o.write("#define " + regName[0] + " " + ", ".join(outCmd) + "\n")
            all_regs.append((regName[0], len(("#define " + regName[0] + " " + ", ".join(outCmd)).split(","))))
    
    o.write("\n\n// Configuration array\n")
    o.write("const unsigned char CONFIG_" + fileBase + "[] = { \\\n")
    for reg in all_regs:
        o.write("\t" + hex(reg[1]) + ", " + reg[0] + ", \\\n")
    o.write("};\n")

    o.write("#endif")

    all_regs.clear()
    


    
